"use strict";(self.webpackChunkfenextjs_component=self.webpackChunkfenextjs_component||[]).push([[2238],{"./node_modules/@tanstack/query-core/build/modern/queryClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E:()=>QueryClient});var isServer="undefined"==typeof window||"Deno"in globalThis;function noop(){}function resolveStaleTime(staleTime,query){return"function"==typeof staleTime?staleTime(query):staleTime}function matchQuery(filters,query){const{type="all",exact,fetchStatus,predicate,queryKey,stale}=filters;if(queryKey)if(exact){if(query.queryHash!==hashQueryKeyByOptions(queryKey,query.options))return!1}else if(!partialMatchKey(query.queryKey,queryKey))return!1;if("all"!==type){const isActive=query.isActive();if("active"===type&&!isActive)return!1;if("inactive"===type&&isActive)return!1}return("boolean"!=typeof stale||query.isStale()===stale)&&((!fetchStatus||fetchStatus===query.state.fetchStatus)&&!(predicate&&!predicate(query)))}function matchMutation(filters,mutation){const{exact,status,predicate,mutationKey}=filters;if(mutationKey){if(!mutation.options.mutationKey)return!1;if(exact){if(hashKey(mutation.options.mutationKey)!==hashKey(mutationKey))return!1}else if(!partialMatchKey(mutation.options.mutationKey,mutationKey))return!1}return(!status||mutation.state.status===status)&&!(predicate&&!predicate(mutation))}function hashQueryKeyByOptions(queryKey,options){return(options?.queryKeyHashFn||hashKey)(queryKey)}function hashKey(queryKey){return JSON.stringify(queryKey,((_,val)=>isPlainObject(val)?Object.keys(val).sort().reduce(((result,key)=>(result[key]=val[key],result)),{}):val))}function partialMatchKey(a,b){return a===b||typeof a==typeof b&&(!(!a||!b||"object"!=typeof a||"object"!=typeof b)&&!Object.keys(b).some((key=>!partialMatchKey(a[key],b[key]))))}function replaceEqualDeep(a,b){if(a===b)return a;const array=isPlainArray(a)&&isPlainArray(b);if(array||isPlainObject(a)&&isPlainObject(b)){const aItems=array?a:Object.keys(a),aSize=aItems.length,bItems=array?b:Object.keys(b),bSize=bItems.length,copy=array?[]:{};let equalItems=0;for(let i=0;i<bSize;i++){const key=array?i:bItems[i];(!array&&aItems.includes(key)||array)&&void 0===a[key]&&void 0===b[key]?(copy[key]=void 0,equalItems++):(copy[key]=replaceEqualDeep(a[key],b[key]),copy[key]===a[key]&&void 0!==a[key]&&equalItems++)}return aSize===bSize&&equalItems===aSize?a:copy}return b}function isPlainArray(value){return Array.isArray(value)&&value.length===Object.keys(value).length}function isPlainObject(o){if(!hasObjectPrototype(o))return!1;const ctor=o.constructor;if(void 0===ctor)return!0;const prot=ctor.prototype;return!!hasObjectPrototype(prot)&&(!!prot.hasOwnProperty("isPrototypeOf")&&Object.getPrototypeOf(o)===Object.prototype)}function hasObjectPrototype(o){return"[object Object]"===Object.prototype.toString.call(o)}function replaceData(prevData,data,options){return"function"==typeof options.structuralSharing?options.structuralSharing(prevData,data):!1!==options.structuralSharing?replaceEqualDeep(prevData,data):data}function addToEnd(items,item,max=0){const newItems=[...items,item];return max&&newItems.length>max?newItems.slice(1):newItems}function addToStart(items,item,max=0){const newItems=[item,...items];return max&&newItems.length>max?newItems.slice(0,-1):newItems}var skipToken=Symbol();function ensureQueryFn(options,fetchOptions){return!options.queryFn&&fetchOptions?.initialPromise?()=>fetchOptions.initialPromise:options.queryFn&&options.queryFn!==skipToken?options.queryFn:()=>Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))}var notifyManager=function createNotifyManager(){let queue=[],transactions=0,notifyFn=callback=>{callback()},batchNotifyFn=callback=>{callback()},scheduleFn=cb=>setTimeout(cb,0);const schedule=callback=>{transactions?queue.push(callback):scheduleFn((()=>{notifyFn(callback)}))};return{batch:callback=>{let result;transactions++;try{result=callback()}finally{transactions--,transactions||(()=>{const originalQueue=queue;queue=[],originalQueue.length&&scheduleFn((()=>{batchNotifyFn((()=>{originalQueue.forEach((callback=>{notifyFn(callback)}))}))}))})()}return result},batchCalls:callback=>(...args)=>{schedule((()=>{callback(...args)}))},schedule,setNotifyFunction:fn=>{notifyFn=fn},setBatchNotifyFunction:fn=>{batchNotifyFn=fn},setScheduler:fn=>{scheduleFn=fn}}}(),Subscribable=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(listener){return this.listeners.add(listener),this.onSubscribe(),()=>{this.listeners.delete(listener),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},focusManager=new class extends Subscribable{#focused;#cleanup;#setup;constructor(){super(),this.#setup=onFocus=>{if(!isServer&&window.addEventListener){const listener=()=>onFocus();return window.addEventListener("visibilitychange",listener,!1),()=>{window.removeEventListener("visibilitychange",listener)}}}}onSubscribe(){this.#cleanup||this.setEventListener(this.#setup)}onUnsubscribe(){this.hasListeners()||(this.#cleanup?.(),this.#cleanup=void 0)}setEventListener(setup){this.#setup=setup,this.#cleanup?.(),this.#cleanup=setup((focused=>{"boolean"==typeof focused?this.setFocused(focused):this.onFocus()}))}setFocused(focused){this.#focused!==focused&&(this.#focused=focused,this.onFocus())}onFocus(){const isFocused=this.isFocused();this.listeners.forEach((listener=>{listener(isFocused)}))}isFocused(){return"boolean"==typeof this.#focused?this.#focused:"hidden"!==globalThis.document?.visibilityState}},onlineManager=new class extends Subscribable{#online=!0;#cleanup;#setup;constructor(){super(),this.#setup=onOnline=>{if(!isServer&&window.addEventListener){const onlineListener=()=>onOnline(!0),offlineListener=()=>onOnline(!1);return window.addEventListener("online",onlineListener,!1),window.addEventListener("offline",offlineListener,!1),()=>{window.removeEventListener("online",onlineListener),window.removeEventListener("offline",offlineListener)}}}}onSubscribe(){this.#cleanup||this.setEventListener(this.#setup)}onUnsubscribe(){this.hasListeners()||(this.#cleanup?.(),this.#cleanup=void 0)}setEventListener(setup){this.#setup=setup,this.#cleanup?.(),this.#cleanup=setup(this.setOnline.bind(this))}setOnline(online){this.#online!==online&&(this.#online=online,this.listeners.forEach((listener=>{listener(online)})))}isOnline(){return this.#online}};function defaultRetryDelay(failureCount){return Math.min(1e3*2**failureCount,3e4)}function canFetch(networkMode){return"online"!==(networkMode??"online")||onlineManager.isOnline()}var CancelledError=class extends Error{constructor(options){super("CancelledError"),this.revert=options?.revert,this.silent=options?.silent}};function isCancelledError(value){return value instanceof CancelledError}function createRetryer(config){let continueFn,isRetryCancelled=!1,failureCount=0,isResolved=!1;const thenable=function pendingThenable(){let resolve,reject;const thenable=new Promise(((_resolve,_reject)=>{resolve=_resolve,reject=_reject}));function finalize(data){Object.assign(thenable,data),delete thenable.resolve,delete thenable.reject}return thenable.status="pending",thenable.catch((()=>{})),thenable.resolve=value=>{finalize({status:"fulfilled",value}),resolve(value)},thenable.reject=reason=>{finalize({status:"rejected",reason}),reject(reason)},thenable}(),canContinue=()=>focusManager.isFocused()&&("always"===config.networkMode||onlineManager.isOnline())&&config.canRun(),canStart=()=>canFetch(config.networkMode)&&config.canRun(),resolve=value=>{isResolved||(isResolved=!0,config.onSuccess?.(value),continueFn?.(),thenable.resolve(value))},reject=value=>{isResolved||(isResolved=!0,config.onError?.(value),continueFn?.(),thenable.reject(value))},pause=()=>new Promise((continueResolve=>{continueFn=value=>{(isResolved||canContinue())&&continueResolve(value)},config.onPause?.()})).then((()=>{continueFn=void 0,isResolved||config.onContinue?.()})),run=()=>{if(isResolved)return;let promiseOrValue;const initialPromise=0===failureCount?config.initialPromise:void 0;try{promiseOrValue=initialPromise??config.fn()}catch(error){promiseOrValue=Promise.reject(error)}Promise.resolve(promiseOrValue).then(resolve).catch((error=>{if(isResolved)return;const retry=config.retry??(isServer?0:3),retryDelay=config.retryDelay??defaultRetryDelay,delay="function"==typeof retryDelay?retryDelay(failureCount,error):retryDelay,shouldRetry=!0===retry||"number"==typeof retry&&failureCount<retry||"function"==typeof retry&&retry(failureCount,error);!isRetryCancelled&&shouldRetry?(failureCount++,config.onFail?.(failureCount,error),function sleep(timeout){return new Promise((resolve=>{setTimeout(resolve,timeout)}))}(delay).then((()=>canContinue()?void 0:pause())).then((()=>{isRetryCancelled?reject(error):run()}))):reject(error)}))};return{promise:thenable,cancel:cancelOptions=>{isResolved||(reject(new CancelledError(cancelOptions)),config.abort?.())},continue:()=>(continueFn?.(),thenable),cancelRetry:()=>{isRetryCancelled=!0},continueRetry:()=>{isRetryCancelled=!1},canStart,start:()=>(canStart()?run():pause().then(run),thenable)}}var Removable=class{#gcTimeout;destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),function isValidTimeout(value){return"number"==typeof value&&value>=0&&value!==1/0}(this.gcTime)&&(this.#gcTimeout=setTimeout((()=>{this.optionalRemove()}),this.gcTime))}updateGcTime(newGcTime){this.gcTime=Math.max(this.gcTime||0,newGcTime??(isServer?1/0:3e5))}clearGcTimeout(){this.#gcTimeout&&(clearTimeout(this.#gcTimeout),this.#gcTimeout=void 0)}},Query=class extends Removable{#initialState;#revertState;#cache;#retryer;#defaultOptions;#abortSignalConsumed;constructor(config){super(),this.#abortSignalConsumed=!1,this.#defaultOptions=config.defaultOptions,this.setOptions(config.options),this.observers=[],this.#cache=config.cache,this.queryKey=config.queryKey,this.queryHash=config.queryHash,this.#initialState=function getDefaultState(options){const data="function"==typeof options.initialData?options.initialData():options.initialData,hasData=void 0!==data,initialDataUpdatedAt=hasData?"function"==typeof options.initialDataUpdatedAt?options.initialDataUpdatedAt():options.initialDataUpdatedAt:0;return{data,dataUpdateCount:0,dataUpdatedAt:hasData?initialDataUpdatedAt??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:hasData?"success":"pending",fetchStatus:"idle"}}(this.options),this.state=config.state??this.#initialState,this.scheduleGc()}get meta(){return this.options.meta}get promise(){return this.#retryer?.promise}setOptions(options){this.options={...this.#defaultOptions,...options},this.updateGcTime(this.options.gcTime)}optionalRemove(){this.observers.length||"idle"!==this.state.fetchStatus||this.#cache.remove(this)}setData(newData,options){const data=replaceData(this.state.data,newData,this.options);return this.#dispatch({data,type:"success",dataUpdatedAt:options?.updatedAt,manual:options?.manual}),data}setState(state,setStateOptions){this.#dispatch({type:"setState",state,setStateOptions})}cancel(options){const promise=this.#retryer?.promise;return this.#retryer?.cancel(options),promise?promise.then(noop).catch(noop):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(this.#initialState)}isActive(){return this.observers.some((observer=>!1!==function resolveEnabled(enabled,query){return"function"==typeof enabled?enabled(query):enabled}(observer.options.enabled,this)))}isDisabled(){return this.getObserversCount()>0?!this.isActive():this.options.queryFn===skipToken||this.state.dataUpdateCount+this.state.errorUpdateCount===0}isStale(){return!!this.state.isInvalidated||(this.getObserversCount()>0?this.observers.some((observer=>observer.getCurrentResult().isStale)):void 0===this.state.data)}isStaleByTime(staleTime=0){return this.state.isInvalidated||void 0===this.state.data||!function timeUntilStale(updatedAt,staleTime){return Math.max(updatedAt+(staleTime||0)-Date.now(),0)}(this.state.dataUpdatedAt,staleTime)}onFocus(){const observer=this.observers.find((x=>x.shouldFetchOnWindowFocus()));observer?.refetch({cancelRefetch:!1}),this.#retryer?.continue()}onOnline(){const observer=this.observers.find((x=>x.shouldFetchOnReconnect()));observer?.refetch({cancelRefetch:!1}),this.#retryer?.continue()}addObserver(observer){this.observers.includes(observer)||(this.observers.push(observer),this.clearGcTimeout(),this.#cache.notify({type:"observerAdded",query:this,observer}))}removeObserver(observer){this.observers.includes(observer)&&(this.observers=this.observers.filter((x=>x!==observer)),this.observers.length||(this.#retryer&&(this.#abortSignalConsumed?this.#retryer.cancel({revert:!0}):this.#retryer.cancelRetry()),this.scheduleGc()),this.#cache.notify({type:"observerRemoved",query:this,observer}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||this.#dispatch({type:"invalidate"})}fetch(options,fetchOptions){if("idle"!==this.state.fetchStatus)if(void 0!==this.state.data&&fetchOptions?.cancelRefetch)this.cancel({silent:!0});else if(this.#retryer)return this.#retryer.continueRetry(),this.#retryer.promise;if(options&&this.setOptions(options),!this.options.queryFn){const observer=this.observers.find((x=>x.options.queryFn));observer&&this.setOptions(observer.options)}const abortController=new AbortController,addSignalProperty=object=>{Object.defineProperty(object,"signal",{enumerable:!0,get:()=>(this.#abortSignalConsumed=!0,abortController.signal)})},context={fetchOptions,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:()=>{const queryFn=ensureQueryFn(this.options,fetchOptions),queryFnContext={queryKey:this.queryKey,meta:this.meta};return addSignalProperty(queryFnContext),this.#abortSignalConsumed=!1,this.options.persister?this.options.persister(queryFn,queryFnContext,this):queryFn(queryFnContext)}};addSignalProperty(context),this.options.behavior?.onFetch(context,this),this.#revertState=this.state,"idle"!==this.state.fetchStatus&&this.state.fetchMeta===context.fetchOptions?.meta||this.#dispatch({type:"fetch",meta:context.fetchOptions?.meta});const onError=error=>{isCancelledError(error)&&error.silent||this.#dispatch({type:"error",error}),isCancelledError(error)||(this.#cache.config.onError?.(error,this),this.#cache.config.onSettled?.(this.state.data,error,this)),this.scheduleGc()};return this.#retryer=createRetryer({initialPromise:fetchOptions?.initialPromise,fn:context.fetchFn,abort:abortController.abort.bind(abortController),onSuccess:data=>{if(void 0!==data){try{this.setData(data)}catch(error){return void onError(error)}this.#cache.config.onSuccess?.(data,this),this.#cache.config.onSettled?.(data,this.state.error,this),this.scheduleGc()}else onError(new Error(`${this.queryHash} data is undefined`))},onError,onFail:(failureCount,error)=>{this.#dispatch({type:"failed",failureCount,error})},onPause:()=>{this.#dispatch({type:"pause"})},onContinue:()=>{this.#dispatch({type:"continue"})},retry:context.options.retry,retryDelay:context.options.retryDelay,networkMode:context.options.networkMode,canRun:()=>!0}),this.#retryer.start()}#dispatch(action){this.state=(state=>{switch(action.type){case"failed":return{...state,fetchFailureCount:action.failureCount,fetchFailureReason:action.error};case"pause":return{...state,fetchStatus:"paused"};case"continue":return{...state,fetchStatus:"fetching"};case"fetch":return{...state,...(data=state.data,options=this.options,{fetchFailureCount:0,fetchFailureReason:null,fetchStatus:canFetch(options.networkMode)?"fetching":"paused",...void 0===data&&{error:null,status:"pending"}}),fetchMeta:action.meta??null};case"success":return{...state,data:action.data,dataUpdateCount:state.dataUpdateCount+1,dataUpdatedAt:action.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!action.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const error=action.error;return isCancelledError(error)&&error.revert&&this.#revertState?{...this.#revertState,fetchStatus:"idle"}:{...state,error,errorUpdateCount:state.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:state.fetchFailureCount+1,fetchFailureReason:error,fetchStatus:"idle",status:"error"};case"invalidate":return{...state,isInvalidated:!0};case"setState":return{...state,...action.state}}var data,options})(this.state),notifyManager.batch((()=>{this.observers.forEach((observer=>{observer.onQueryUpdate()})),this.#cache.notify({query:this,type:"updated",action})}))}};var QueryCache=class extends Subscribable{constructor(config={}){super(),this.config=config,this.#queries=new Map}#queries;build(client,options,state){const queryKey=options.queryKey,queryHash=options.queryHash??hashQueryKeyByOptions(queryKey,options);let query=this.get(queryHash);return query||(query=new Query({cache:this,queryKey,queryHash,options:client.defaultQueryOptions(options),state,defaultOptions:client.getQueryDefaults(queryKey)}),this.add(query)),query}add(query){this.#queries.has(query.queryHash)||(this.#queries.set(query.queryHash,query),this.notify({type:"added",query}))}remove(query){const queryInMap=this.#queries.get(query.queryHash);queryInMap&&(query.destroy(),queryInMap===query&&this.#queries.delete(query.queryHash),this.notify({type:"removed",query}))}clear(){notifyManager.batch((()=>{this.getAll().forEach((query=>{this.remove(query)}))}))}get(queryHash){return this.#queries.get(queryHash)}getAll(){return[...this.#queries.values()]}find(filters){const defaultedFilters={exact:!0,...filters};return this.getAll().find((query=>matchQuery(defaultedFilters,query)))}findAll(filters={}){const queries=this.getAll();return Object.keys(filters).length>0?queries.filter((query=>matchQuery(filters,query))):queries}notify(event){notifyManager.batch((()=>{this.listeners.forEach((listener=>{listener(event)}))}))}onFocus(){notifyManager.batch((()=>{this.getAll().forEach((query=>{query.onFocus()}))}))}onOnline(){notifyManager.batch((()=>{this.getAll().forEach((query=>{query.onOnline()}))}))}},Mutation=class extends Removable{#observers;#mutationCache;#retryer;constructor(config){super(),this.mutationId=config.mutationId,this.#mutationCache=config.mutationCache,this.#observers=[],this.state=config.state||{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0},this.setOptions(config.options),this.scheduleGc()}setOptions(options){this.options=options,this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(observer){this.#observers.includes(observer)||(this.#observers.push(observer),this.clearGcTimeout(),this.#mutationCache.notify({type:"observerAdded",mutation:this,observer}))}removeObserver(observer){this.#observers=this.#observers.filter((x=>x!==observer)),this.scheduleGc(),this.#mutationCache.notify({type:"observerRemoved",mutation:this,observer})}optionalRemove(){this.#observers.length||("pending"===this.state.status?this.scheduleGc():this.#mutationCache.remove(this))}continue(){return this.#retryer?.continue()??this.execute(this.state.variables)}async execute(variables){this.#retryer=createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(variables):Promise.reject(new Error("No mutationFn found")),onFail:(failureCount,error)=>{this.#dispatch({type:"failed",failureCount,error})},onPause:()=>{this.#dispatch({type:"pause"})},onContinue:()=>{this.#dispatch({type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode,canRun:()=>this.#mutationCache.canRun(this)});const restored="pending"===this.state.status,isPaused=!this.#retryer.canStart();try{if(!restored){this.#dispatch({type:"pending",variables,isPaused}),await(this.#mutationCache.config.onMutate?.(variables,this));const context=await(this.options.onMutate?.(variables));context!==this.state.context&&this.#dispatch({type:"pending",context,variables,isPaused})}const data=await this.#retryer.start();return await(this.#mutationCache.config.onSuccess?.(data,variables,this.state.context,this)),await(this.options.onSuccess?.(data,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(data,null,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(data,null,variables,this.state.context)),this.#dispatch({type:"success",data}),data}catch(error){try{throw await(this.#mutationCache.config.onError?.(error,variables,this.state.context,this)),await(this.options.onError?.(error,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(void 0,error,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(void 0,error,variables,this.state.context)),error}finally{this.#dispatch({type:"error",error})}}finally{this.#mutationCache.runNext(this)}}#dispatch(action){this.state=(state=>{switch(action.type){case"failed":return{...state,failureCount:action.failureCount,failureReason:action.error};case"pause":return{...state,isPaused:!0};case"continue":return{...state,isPaused:!1};case"pending":return{...state,context:action.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:action.isPaused,status:"pending",variables:action.variables,submittedAt:Date.now()};case"success":return{...state,data:action.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...state,data:void 0,error:action.error,failureCount:state.failureCount+1,failureReason:action.error,isPaused:!1,status:"error"}}})(this.state),notifyManager.batch((()=>{this.#observers.forEach((observer=>{observer.onMutationUpdate(action)})),this.#mutationCache.notify({mutation:this,type:"updated",action})}))}};var MutationCache=class extends Subscribable{constructor(config={}){super(),this.config=config,this.#mutations=new Map,this.#mutationId=Date.now()}#mutations;#mutationId;build(client,options,state){const mutation=new Mutation({mutationCache:this,mutationId:++this.#mutationId,options:client.defaultMutationOptions(options),state});return this.add(mutation),mutation}add(mutation){const scope=scopeFor(mutation),mutations=this.#mutations.get(scope)??[];mutations.push(mutation),this.#mutations.set(scope,mutations),this.notify({type:"added",mutation})}remove(mutation){const scope=scopeFor(mutation);if(this.#mutations.has(scope)){const mutations=this.#mutations.get(scope)?.filter((x=>x!==mutation));mutations&&(0===mutations.length?this.#mutations.delete(scope):this.#mutations.set(scope,mutations))}this.notify({type:"removed",mutation})}canRun(mutation){const firstPendingMutation=this.#mutations.get(scopeFor(mutation))?.find((m=>"pending"===m.state.status));return!firstPendingMutation||firstPendingMutation===mutation}runNext(mutation){const foundMutation=this.#mutations.get(scopeFor(mutation))?.find((m=>m!==mutation&&m.state.isPaused));return foundMutation?.continue()??Promise.resolve()}clear(){notifyManager.batch((()=>{this.getAll().forEach((mutation=>{this.remove(mutation)}))}))}getAll(){return[...this.#mutations.values()].flat()}find(filters){const defaultedFilters={exact:!0,...filters};return this.getAll().find((mutation=>matchMutation(defaultedFilters,mutation)))}findAll(filters={}){return this.getAll().filter((mutation=>matchMutation(filters,mutation)))}notify(event){notifyManager.batch((()=>{this.listeners.forEach((listener=>{listener(event)}))}))}resumePausedMutations(){const pausedMutations=this.getAll().filter((x=>x.state.isPaused));return notifyManager.batch((()=>Promise.all(pausedMutations.map((mutation=>mutation.continue().catch(noop))))))}};function scopeFor(mutation){return mutation.options.scope?.id??String(mutation.mutationId)}function infiniteQueryBehavior(pages){return{onFetch:(context,query)=>{const options=context.options,direction=context.fetchOptions?.meta?.fetchMore?.direction,oldPages=context.state.data?.pages||[],oldPageParams=context.state.data?.pageParams||[];let result={pages:[],pageParams:[]},currentPage=0;const fetchFn=async()=>{let cancelled=!1;const queryFn=ensureQueryFn(context.options,context.fetchOptions),fetchPage=async(data,param,previous)=>{if(cancelled)return Promise.reject();if(null==param&&data.pages.length)return Promise.resolve(data);const queryFnContext={queryKey:context.queryKey,pageParam:param,direction:previous?"backward":"forward",meta:context.options.meta};var object;object=queryFnContext,Object.defineProperty(object,"signal",{enumerable:!0,get:()=>(context.signal.aborted?cancelled=!0:context.signal.addEventListener("abort",(()=>{cancelled=!0})),context.signal)});const page=await queryFn(queryFnContext),{maxPages}=context.options,addTo=previous?addToStart:addToEnd;return{pages:addTo(data.pages,page,maxPages),pageParams:addTo(data.pageParams,param,maxPages)}};if(direction&&oldPages.length){const previous="backward"===direction,oldData={pages:oldPages,pageParams:oldPageParams},param=(previous?getPreviousPageParam:getNextPageParam)(options,oldData);result=await fetchPage(oldData,param,previous)}else{const remainingPages=pages??oldPages.length;do{const param=0===currentPage?oldPageParams[0]??options.initialPageParam:getNextPageParam(options,result);if(currentPage>0&&null==param)break;result=await fetchPage(result,param),currentPage++}while(currentPage<remainingPages)}return result};context.options.persister?context.fetchFn=()=>context.options.persister?.(fetchFn,{queryKey:context.queryKey,meta:context.options.meta,signal:context.signal},query):context.fetchFn=fetchFn}}}function getNextPageParam(options,{pages,pageParams}){const lastIndex=pages.length-1;return pages.length>0?options.getNextPageParam(pages[lastIndex],pages,pageParams[lastIndex],pageParams):void 0}function getPreviousPageParam(options,{pages,pageParams}){return pages.length>0?options.getPreviousPageParam?.(pages[0],pages,pageParams[0],pageParams):void 0}var QueryClient=class{#queryCache;#mutationCache;#defaultOptions;#queryDefaults;#mutationDefaults;#mountCount;#unsubscribeFocus;#unsubscribeOnline;constructor(config={}){this.#queryCache=config.queryCache||new QueryCache,this.#mutationCache=config.mutationCache||new MutationCache,this.#defaultOptions=config.defaultOptions||{},this.#queryDefaults=new Map,this.#mutationDefaults=new Map,this.#mountCount=0}mount(){this.#mountCount++,1===this.#mountCount&&(this.#unsubscribeFocus=focusManager.subscribe((async focused=>{focused&&(await this.resumePausedMutations(),this.#queryCache.onFocus())})),this.#unsubscribeOnline=onlineManager.subscribe((async online=>{online&&(await this.resumePausedMutations(),this.#queryCache.onOnline())})))}unmount(){this.#mountCount--,0===this.#mountCount&&(this.#unsubscribeFocus?.(),this.#unsubscribeFocus=void 0,this.#unsubscribeOnline?.(),this.#unsubscribeOnline=void 0)}isFetching(filters){return this.#queryCache.findAll({...filters,fetchStatus:"fetching"}).length}isMutating(filters){return this.#mutationCache.findAll({...filters,status:"pending"}).length}getQueryData(queryKey){const options=this.defaultQueryOptions({queryKey});return this.#queryCache.get(options.queryHash)?.state.data}ensureQueryData(options){const cachedData=this.getQueryData(options.queryKey);if(void 0===cachedData)return this.fetchQuery(options);{const defaultedOptions=this.defaultQueryOptions(options),query=this.#queryCache.build(this,defaultedOptions);return options.revalidateIfStale&&query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime,query))&&this.prefetchQuery(defaultedOptions),Promise.resolve(cachedData)}}getQueriesData(filters){return this.#queryCache.findAll(filters).map((({queryKey,state})=>[queryKey,state.data]))}setQueryData(queryKey,updater,options){const defaultedOptions=this.defaultQueryOptions({queryKey}),query=this.#queryCache.get(defaultedOptions.queryHash),prevData=query?.state.data,data=function functionalUpdate(updater,input){return"function"==typeof updater?updater(input):updater}(updater,prevData);if(void 0!==data)return this.#queryCache.build(this,defaultedOptions).setData(data,{...options,manual:!0})}setQueriesData(filters,updater,options){return notifyManager.batch((()=>this.#queryCache.findAll(filters).map((({queryKey})=>[queryKey,this.setQueryData(queryKey,updater,options)]))))}getQueryState(queryKey){const options=this.defaultQueryOptions({queryKey});return this.#queryCache.get(options.queryHash)?.state}removeQueries(filters){const queryCache=this.#queryCache;notifyManager.batch((()=>{queryCache.findAll(filters).forEach((query=>{queryCache.remove(query)}))}))}resetQueries(filters,options){const queryCache=this.#queryCache,refetchFilters={type:"active",...filters};return notifyManager.batch((()=>(queryCache.findAll(filters).forEach((query=>{query.reset()})),this.refetchQueries(refetchFilters,options))))}cancelQueries(filters={},cancelOptions={}){const defaultedCancelOptions={revert:!0,...cancelOptions},promises=notifyManager.batch((()=>this.#queryCache.findAll(filters).map((query=>query.cancel(defaultedCancelOptions)))));return Promise.all(promises).then(noop).catch(noop)}invalidateQueries(filters={},options={}){return notifyManager.batch((()=>{if(this.#queryCache.findAll(filters).forEach((query=>{query.invalidate()})),"none"===filters.refetchType)return Promise.resolve();const refetchFilters={...filters,type:filters.refetchType??filters.type??"active"};return this.refetchQueries(refetchFilters,options)}))}refetchQueries(filters={},options){const fetchOptions={...options,cancelRefetch:options?.cancelRefetch??!0},promises=notifyManager.batch((()=>this.#queryCache.findAll(filters).filter((query=>!query.isDisabled())).map((query=>{let promise=query.fetch(void 0,fetchOptions);return fetchOptions.throwOnError||(promise=promise.catch(noop)),"paused"===query.state.fetchStatus?Promise.resolve():promise}))));return Promise.all(promises).then(noop)}fetchQuery(options){const defaultedOptions=this.defaultQueryOptions(options);void 0===defaultedOptions.retry&&(defaultedOptions.retry=!1);const query=this.#queryCache.build(this,defaultedOptions);return query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime,query))?query.fetch(defaultedOptions):Promise.resolve(query.state.data)}prefetchQuery(options){return this.fetchQuery(options).then(noop).catch(noop)}fetchInfiniteQuery(options){return options.behavior=infiniteQueryBehavior(options.pages),this.fetchQuery(options)}prefetchInfiniteQuery(options){return this.fetchInfiniteQuery(options).then(noop).catch(noop)}ensureInfiniteQueryData(options){return options.behavior=infiniteQueryBehavior(options.pages),this.ensureQueryData(options)}resumePausedMutations(){return onlineManager.isOnline()?this.#mutationCache.resumePausedMutations():Promise.resolve()}getQueryCache(){return this.#queryCache}getMutationCache(){return this.#mutationCache}getDefaultOptions(){return this.#defaultOptions}setDefaultOptions(options){this.#defaultOptions=options}setQueryDefaults(queryKey,options){this.#queryDefaults.set(hashKey(queryKey),{queryKey,defaultOptions:options})}getQueryDefaults(queryKey){const defaults=[...this.#queryDefaults.values()];let result={};return defaults.forEach((queryDefault=>{partialMatchKey(queryKey,queryDefault.queryKey)&&(result={...result,...queryDefault.defaultOptions})})),result}setMutationDefaults(mutationKey,options){this.#mutationDefaults.set(hashKey(mutationKey),{mutationKey,defaultOptions:options})}getMutationDefaults(mutationKey){const defaults=[...this.#mutationDefaults.values()];let result={};return defaults.forEach((queryDefault=>{partialMatchKey(mutationKey,queryDefault.mutationKey)&&(result={...result,...queryDefault.defaultOptions})})),result}defaultQueryOptions(options){if(options._defaulted)return options;const defaultedOptions={...this.#defaultOptions.queries,...this.getQueryDefaults(options.queryKey),...options,_defaulted:!0};return defaultedOptions.queryHash||(defaultedOptions.queryHash=hashQueryKeyByOptions(defaultedOptions.queryKey,defaultedOptions)),void 0===defaultedOptions.refetchOnReconnect&&(defaultedOptions.refetchOnReconnect="always"!==defaultedOptions.networkMode),void 0===defaultedOptions.throwOnError&&(defaultedOptions.throwOnError=!!defaultedOptions.suspense),!defaultedOptions.networkMode&&defaultedOptions.persister&&(defaultedOptions.networkMode="offlineFirst"),!0!==defaultedOptions.enabled&&defaultedOptions.queryFn===skipToken&&(defaultedOptions.enabled=!1),defaultedOptions}defaultMutationOptions(options){return options?._defaulted?options:{...this.#defaultOptions.mutations,...options?.mutationKey&&this.getMutationDefaults(options.mutationKey),...options,_defaulted:!0}}clear(){this.#queryCache.clear(),this.#mutationCache.clear()}}},"./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ht:()=>QueryClientProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),QueryClientContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0),QueryClientProvider=({client,children})=>(react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>(client.mount(),()=>{client.unmount()})),[client]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(QueryClientContext.Provider,{value:client,children}))}}]);