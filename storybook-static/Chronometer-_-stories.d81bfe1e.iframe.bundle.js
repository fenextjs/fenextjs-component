"use strict";(self.webpackChunkfenextjs_component=self.webpackChunkfenextjs_component||[]).push([[5693],{"./src/Chronometer/_.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Index:()=>Index,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Chronometer/index.tsx"),__jsx=react__WEBPACK_IMPORTED_MODULE_0__.createElement;const __WEBPACK_DEFAULT_EXPORT__={title:"Chronometer/Chronometer",component:_index__WEBPACK_IMPORTED_MODULE_1__.z};var Index=function Profile(args){return __jsx(_index__WEBPACK_IMPORTED_MODULE_1__.z,args)}.bind({});Index.args={},Index.parameters={...Index.parameters,docs:{...Index.parameters?.docs,source:{originalSource:"args => <Chronometer {...args} />",...Index.parameters?.docs?.source}}};const __namedExportsOrder=["Index"]},"./src/Chronometer/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>Chronometer});var fenextjs_functions__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/fenextjs-functions/cjs/index.js"),fenextjs_hook__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/fenextjs-hook/cjs/index.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__jsx=react__WEBPACK_IMPORTED_MODULE_0__.createElement,Chronometer=function Chronometer(_ref){var _ref$className=_ref.className,className=void 0===_ref$className?"":_ref$className,_ref$time=_ref.time,time=void 0===_ref$time?100:_ref$time,_ref$min=_ref.min,min=void 0===_ref$min?0:_ref$min,onChange=_ref.onChange,_ref$optionsTimeToTex=_ref.optionsTimeToText,optionsTimeToText=void 0===_ref$optionsTimeToTex?{days:!1,hours:!0,minutes:!0,seconds:!0}:_ref$optionsTimeToTex,_useData=(0,fenextjs_hook__WEBPACK_IMPORTED_MODULE_2__.useData)(time,{onChangeDataAfter:onChange}),data=_useData.data,setData=_useData.setData,onReduce=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((function(){setData(Math.max(data-1,min))}),[data]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((function(){var intervalId=setInterval(onReduce,1e3);return function(){return clearInterval(intervalId)}}),[data]),__jsx(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,__jsx("div",{className:"fenext-chronometer ".concat(className," ")},(0,fenextjs_functions__WEBPACK_IMPORTED_MODULE_1__.getTimeToText)(new Date(0,0,0,0,0,data,0),optionsTimeToText)))};Chronometer.__docgenInfo={description:"",methods:[],displayName:"Chronometer",props:{time:{required:!1,tsType:{name:"number"},description:"The time in seconds for the component.",defaultValue:{value:"100",computed:!1}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(time: number) => void",signature:{arguments:[{type:{name:"number"},name:"time"}],return:{name:"void"}}},description:"The change time for the component."},min:{required:!1,tsType:{name:"number"},description:"The min in seconds for the component.",defaultValue:{value:"0",computed:!1}},optionsTimeToText:{required:!1,tsType:{name:"getTimeToTextProps"},description:"The optionsTimeToText for the component.",defaultValue:{value:"{\n    days: false,\n    hours: true,\n    minutes: true,\n    seconds: true,\n}",computed:!1}},className:{required:!1,tsType:{name:"string"},description:"The class name for the component.",defaultValue:{value:'""',computed:!1}}}}}}]);